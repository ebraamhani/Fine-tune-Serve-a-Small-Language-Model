name: ML Training Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/training/**'
      - 'src/data_processing/**'
      - 'src/dataset_generation/**'
      - 'config/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/training/**'
      - 'src/data_processing/**'
      - 'src/dataset_generation/**'
      - 'config/**'
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Model to train'
        required: true
        default: 'gpt2'
      dataset_name:
        description: 'Dataset to use'
        required: true
        default: 'squad'

env:
  PYTHON_VERSION: "3.11"
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}

jobs:
  data-validation:
    name: Data Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate datasets
      run: |
        python -c "
        from datasets import load_dataset
        import sys
        
        datasets_to_check = ['squad', 'glue', 'conll2003']
        for dataset in datasets_to_check:
            try:
                ds = load_dataset(dataset, split='train[:100]')
                print(f'✅ {dataset}: {len(ds)} samples')
            except Exception as e:
                print(f'❌ {dataset}: {e}')
                sys.exit(1)
        "
        
    - name: Check data quality
      run: |
        python scripts/test_huggingface.py

  model-training:
    name: Model Training
    runs-on: ubuntu-latest
    needs: [data-validation]
    
    strategy:
      matrix:
        model: [gpt2, distilbert-base-uncased]
        dataset: [squad, glue]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install wandb
        
    - name: Login to Weights & Biases
      run: |
        wandb login ${{ env.WANDB_API_KEY }}
        
    - name: Train model
      run: |
        echo "Training ${{ matrix.model }} on ${{ matrix.dataset }}"
        # Add your training script here
        # python src/training/train.py --model ${{ matrix.model }} --dataset ${{ matrix.dataset }}
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-${{ matrix.model }}-${{ matrix.dataset }}
        path: |
          models/
          checkpoints/
          *.pt
          *.pth
          *.bin
        retention-days: 30

  model-evaluation:
    name: Model Evaluation
    runs-on: ubuntu-latest
    needs: [model-training]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        path: models/
        
    - name: Evaluate models
      run: |
        echo "Evaluating trained models..."
        # Add your evaluation script here
        # python src/evaluation/evaluate.py
        
    - name: Generate evaluation report
      run: |
        echo "Generating evaluation report..."
        # Add report generation here
        
    - name: Upload evaluation results
      uses: actions/upload-artifact@v4
      with:
        name: evaluation-results
        path: |
          evaluation/
          reports/
          *.json
          *.csv
        retention-days: 90

  model-deployment:
    name: Model Deployment
    runs-on: ubuntu-latest
    needs: [model-evaluation]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download evaluation results
      uses: actions/download-artifact@v4
      with:
        name: evaluation-results
        path: evaluation/
        
    - name: Deploy best model
      run: |
        echo "Deploying best performing model..."
        # Add deployment logic here
        # Example: Upload to Hugging Face Hub, deploy to cloud, etc.
        
    - name: Update model registry
      run: |
        echo "Updating model registry..."
        # Add registry update logic here 