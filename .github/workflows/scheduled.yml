name: Scheduled Maintenance

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  HF_TOKEN: ${{ secrets.HF_TOKEN }}

jobs:
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit
        
    - name: Check for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        pip-audit --format json --output pip-audit-report.json || true
        
    - name: Update dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade -r requirements.txt
        
    - name: Create Pull Request for updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: update dependencies'
        body: |
          Automated dependency updates
          
          - Updated pip packages
          - Security vulnerability checks
          - Dependency compatibility tests
        branch: dependency-updates
        delete-branch: true

  model-health-check:
    name: Model Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test Hugging Face connectivity
      run: |
        python scripts/test_huggingface.py
        
    - name: Check model availability
      run: |
        python -c "
        from transformers import AutoTokenizer
        import sys
        
        models_to_check = ['gpt2', 'bert-base-uncased', 'distilbert-base-uncased']
        for model in models_to_check:
            try:
                tokenizer = AutoTokenizer.from_pretrained(model)
                print(f'✅ {model}: Available')
            except Exception as e:
                print(f'❌ {model}: {e}')
                sys.exit(1)
        "

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old artifacts..."
        # GitHub automatically cleans up artifacts after 90 days
        # This step can be used for custom cleanup logic if needed 