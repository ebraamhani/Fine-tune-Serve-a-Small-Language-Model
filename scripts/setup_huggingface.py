#!/usr/bin/env python3
"""
Hugging Face Token Setup Script
Interactive script to configure Hugging Face tokens and authentication
"""

import os
import sys
import getpass
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent.parent))

from config.huggingface_config import HuggingFaceConfig

def setup_huggingface_token():
    """Interactive setup for Hugging Face token"""
    print("ü§ó Hugging Face Token Setup")
    print("=" * 40)
    
    # Check if token already exists
    existing_token = os.getenv('HUGGINGFACE_TOKEN') or os.getenv('HF_TOKEN')
    if existing_token:
        print(f"‚úÖ Found existing token: {existing_token[:8]}...")
        use_existing = input("Use existing token? (y/n): ").lower().strip()
        if use_existing == 'y':
            return existing_token
    
    print("\nTo get your Hugging Face token:")
    print("1. Go to https://huggingface.co/settings/tokens")
    print("2. Click 'New token'")
    print("3. Give it a name (e.g., 'fine-tuning-project')")
    print("4. Select 'Write' role for full access")
    print("5. Copy the generated token\n")
    
    # Get token from user
    token = getpass.getpass("Enter your Hugging Face token: ").strip()
    
    if not token:
        print("‚ùå No token provided. Setup cancelled.")
        return None
    
    # Validate token format (basic check)
    if len(token) < 20:
        print("‚ùå Token seems too short. Please check your token.")
        return None
    
    # Test the token
    print("\nüîç Testing token...")
    try:
        hf_config = HuggingFaceConfig(token=token)
        hf_config.login(token)
        
        if hf_config.is_logged_in():
            print("‚úÖ Token is valid and working!")
            return token
        else:
            print("‚ùå Token validation failed. Please check your token.")
            return None
            
    except Exception as e:
        print(f"‚ùå Error testing token: {e}")
        return None

def save_token_to_env_file(token: str):
    """Save token to .env file"""
    env_file = Path(__file__).parent.parent / '.env'
    
    # Read existing .env file
    env_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    
    # Add/update token
    env_vars['HUGGINGFACE_TOKEN'] = token
    env_vars['HF_TOKEN'] = token
    
    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# Hugging Face Configuration\n")
        f.write("# Generated by setup_huggingface.py\n\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"‚úÖ Token saved to {env_file}")

def setup_cache_directory():
    """Setup cache directory for Hugging Face models"""
    cache_dir = Path.home() / '.cache' / 'huggingface'
    cache_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"‚úÖ Cache directory: {cache_dir}")
    return str(cache_dir)

def main():
    """Main setup function"""
    print("üöÄ Setting up Hugging Face for your fine-tuning project...\n")
    
    # Setup cache directory
    cache_dir = setup_cache_directory()
    
    # Setup token
    token = setup_huggingface_token()
    if not token:
        print("\n‚ùå Setup incomplete. Please run the script again with a valid token.")
        return
    
    # Save token to .env file
    save_token_to_env_file(token)
    
    # Test final configuration
    print("\nüß™ Testing final configuration...")
    try:
        hf_config = HuggingFaceConfig(token=token, cache_dir=cache_dir)
        
        if hf_config.is_logged_in():
            print("‚úÖ Setup complete! Your Hugging Face configuration is ready.")
            print("\nYou can now:")
            print("- Download models from Hugging Face Hub")
            print("- Upload your fine-tuned models")
            print("- Use datasets from Hugging Face")
            print("- Access gated models (if you have access)")
        else:
            print("‚ùå Final test failed. Please check your configuration.")
            
    except Exception as e:
        print(f"‚ùå Error in final test: {e}")

if __name__ == "__main__":
    main() 